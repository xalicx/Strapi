{"version":3,"file":"create-strapi-app.mjs","sources":["../src/utils/prompt-user.ts","../src/create-strapi-app.ts"],"sourcesContent":["import inquirer from 'inquirer';\nimport type { Program } from '../types';\n\ninterface Answers {\n  directory: string;\n  quick: boolean;\n}\n\nexport default async function promptUser(\n  projectName: string,\n  program: Program,\n  hasDatabaseOptions: boolean\n) {\n  return inquirer.prompt<Answers>([\n    {\n      type: 'input',\n      default: 'my-strapi-project',\n      name: 'directory',\n      message: 'What would you like to name your project?',\n      when: !projectName,\n    },\n    {\n      type: 'list',\n      name: 'quick',\n      message: 'Choose your installation type',\n      when: !program.quickstart && !hasDatabaseOptions,\n      choices: [\n        {\n          name: 'Quickstart (recommended)',\n          value: true,\n        },\n        {\n          name: 'Custom (manual settings)',\n          value: false,\n        },\n      ],\n    },\n  ]);\n}\n","import { readFileSync } from 'node:fs';\nimport { resolve } from 'node:path';\nimport commander from 'commander';\nimport { checkInstallPath, generateNewApp } from '@strapi/generate-new';\nimport promptUser from './utils/prompt-user';\nimport type { Program } from './types';\n\nconst packageJson = JSON.parse(readFileSync(resolve(__dirname, '../package.json'), 'utf8'));\n\nconst command = new commander.Command(packageJson.name);\n\nconst databaseOptions: Array<keyof Program> = [\n  'dbclient',\n  'dbhost',\n  'dbport',\n  'dbname',\n  'dbusername',\n  'dbpassword',\n  'dbssl',\n  'dbfile',\n];\n\ncommand\n  .version(packageJson.version)\n  .arguments('[directory]')\n  .option('--no-run', 'Do not start the application after it is created')\n  .option('--use-npm', 'Force usage of npm instead of yarn to create the project')\n  .option('--debug', 'Display database connection error')\n  .option('--quickstart', 'Quickstart app creation')\n  .option('--dbclient <dbclient>', 'Database client')\n  .option('--dbhost <dbhost>', 'Database host')\n  .option('--dbport <dbport>', 'Database port')\n  .option('--dbname <dbname>', 'Database name')\n  .option('--dbusername <dbusername>', 'Database username')\n  .option('--dbpassword <dbpassword>', 'Database password')\n  .option('--dbssl <dbssl>', 'Database SSL')\n  .option('--dbfile <dbfile>', 'Database file path for sqlite')\n  .option('--dbforce', 'Overwrite database content if any')\n  .option('--template <templateurl>', 'Specify a Strapi template')\n  .option('--ts, --typescript', 'Use TypeScript to generate the project')\n  .description('create a new application')\n  .action((directory, programArgs) => {\n    initProject(directory, programArgs);\n  })\n  .parse(process.argv);\n\nfunction generateApp(projectName: string, options: unknown) {\n  if (!projectName) {\n    console.error('Please specify the <directory> of your project when using --quickstart');\n    process.exit(1);\n  }\n\n  return generateNewApp(projectName, options).then(() => {\n    if (process.platform === 'win32') {\n      process.exit(0);\n    }\n  });\n}\n\nasync function initProject(projectName: string, programArgs: Program) {\n  if (projectName) {\n    await checkInstallPath(resolve(projectName));\n  }\n\n  const programFlags = command\n    .createHelp()\n    .visibleOptions(command)\n    .reduce<Array<string | undefined>>((acc, { short, long }) => [...acc, short, long], [])\n    .filter(Boolean);\n\n  if (programArgs.template && programFlags.includes(programArgs.template)) {\n    console.error(`${programArgs.template} is not a valid template`);\n    process.exit(1);\n  }\n\n  const hasDatabaseOptions = databaseOptions.some((opt) => programArgs[opt]);\n\n  if (programArgs.quickstart && hasDatabaseOptions) {\n    console.error(\n      `The quickstart option is incompatible with the following options: ${databaseOptions.join(\n        ', '\n      )}`\n    );\n    process.exit(1);\n  }\n\n  if (hasDatabaseOptions) {\n    programArgs.quickstart = false; // Will disable the quickstart question because != 'undefined'\n  }\n\n  if (programArgs.quickstart) {\n    return generateApp(projectName, programArgs);\n  }\n\n  const prompt = await promptUser(projectName, programArgs, hasDatabaseOptions);\n  const directory = prompt.directory || projectName;\n  await checkInstallPath(resolve(directory));\n\n  const options = {\n    template: programArgs.template,\n    quickstart: prompt.quick || programArgs.quickstart,\n  };\n\n  const generateStrapiAppOptions = {\n    ...programArgs,\n    ...options,\n  };\n\n  return generateApp(directory, generateStrapiAppOptions);\n}\n"],"names":[],"mappings":"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"}